#!/usr/bin/ruby

# frozen_string_literal: true

class RomanToNumber
  attr_reader :roman_numeral

  def initialize(roman_numeral)
    @roman_numeral = roman_numeral
  end

  def call
    previous_roman_integer = nil
    number = 0

    roman_numeral.
      chars.
      map!(&method(:roman_integer)).
      each do |current_roman_integer|
        if previous_roman_integer && current_roman_integer > previous_roman_integer
          # Parti pris: 8 == VIII et jamais 8 == IIX
          number = number - (2 * previous_roman_integer) + current_roman_integer
        else
          number += current_roman_integer
        end

        previous_roman_integer = current_roman_integer
      end

    number
  end

  private

  def roman_integer(roman_value)
    case roman_value
    when 'M' then 1000
    when 'D' then 500
    when 'C' then 100
    when 'L' then 50
    when 'X' then 10
    when 'V' then 5
    when 'I' then 1
    else          0
    end
  end
end

print "What roman numeral do you want: "
puts RomanToNumber.new(gets.chomp).call
